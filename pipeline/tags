!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BAND_COLORS	parameters.py	/^BAND_COLORS = dict($/;"	v
Book	book.py	/^class Book:$/;"	c
COLORS	parameters.py	/^COLORS = dict($/;"	v
Config	book.py	/^from .parameters import Config$/;"	i
Config	parameters.py	/^class Config:$/;"	c
EXTENSIONS	lib.py	/^EXTENSIONS = set($/;"	v
FONT	lib.py	/^FONT = cv2.FONT_HERSHEY_SIMPLEX$/;"	v
HTML	lib.py	/^from IPython.display import HTML, Image, display$/;"	i
HTML	page.py	/^from IPython.display import HTML, display$/;"	i
Image	lib.py	/^from IPython.display import HTML, Image, display$/;"	i
Image	lib.py	/^import PIL.Image$/;"	i
MODES	ocr.py	/^MODES = dict($/;"	v
NamedTemporaryFile	lib.py	/^from tempfile import NamedTemporaryFile$/;"	i
OCR	book.py	/^from .ocr import OCR$/;"	i
OCR	ocr.py	/^class OCR:$/;"	c
OCR	page.py	/^from .ocr import OCR$/;"	i
PIL	lib.py	/^import PIL.Image$/;"	i
Page	book.py	/^from .page import Page$/;"	i
Page	page.py	/^class Page:$/;"	c
SETTINGS	parameters.py	/^SETTINGS = dict($/;"	v
STAGES	parameters.py	/^STAGES = dict($/;"	v
Timestamp	book.py	/^from tf.core.timestamp import Timestamp$/;"	i
__init__	book.py	/^    def __init__(self, **params):$/;"	m	class:Book
__init__	ocr.py	/^    def __init__(self, engine, page=None, pageFile=None):$/;"	m	class:OCR
__init__	page.py	/^    def __init__(self, engine, f, batch=False, boxed=True):$/;"	m	class:Page
__init__	parameters.py	/^    def __init__(self, tm, **params):$/;"	m	class:Config
_applySettings	book.py	/^    def _applySettings(self):$/;"	m	class:Book
_clean	page.py	/^    def _clean(self, mark=None, line=None):$/;"	m	class:Page
_doPage	book.py	/^    def _doPage($/;"	m	class:Book
_histogram	page.py	/^    def _histogram(self):$/;"	m	class:Page
_layout	page.py	/^    def _layout(self):$/;"	m	class:Page
_margins	page.py	/^    def _margins(self):$/;"	m	class:Page
_normalize	page.py	/^    def _normalize(self):$/;"	m	class:Page
_ocr	page.py	/^    def _ocr(self):$/;"	m	class:Page
_serial	page.py	/^    def _serial(self, stage, data, extension, handle=None):$/;"	m	class:Page
_showCleanInfo	page.py	/^    def _showCleanInfo(self):$/;"	m	class:Page
accuracy	parameters.py	/^    accuracy=0.8,$/;"	v
addBox	lib.py	/^def addBox(C, im, top, bottom, left, right, kept, band, seq, connDegree):$/;"	f
addSeq	lib.py	/^def addSeq($/;"	f
addStripe	lib.py	/^def addStripe($/;"	f
availableBands	book.py	/^    def availableBands(self):$/;"	m	class:Book
availableMarks	book.py	/^    def availableMarks(self):$/;"	m	class:Book
availablePages	book.py	/^    def availablePages(self):$/;"	m	class:Book
bandBroad	parameters.py	/^    bandBroad=(-15, 10),$/;"	v
bandHigh	parameters.py	/^    bandHigh=(10, 30),$/;"	v
bandInter	parameters.py	/^    bandInter=(5, 5),$/;"	v
bandLow	parameters.py	/^    bandLow=(-10, -10),$/;"	v
bandMain	parameters.py	/^    bandMain=(0, 0),$/;"	v
bandMid	parameters.py	/^    bandMid=(10, -5),$/;"	v
blackGRS	parameters.py	/^    blackGRS=0,$/;"	v
blackRGB	parameters.py	/^    blackRGB=(0, 0, 0),$/;"	v
blockRGB	parameters.py	/^    blockRGB=(0, 255, 255),$/;"	v
blurX	parameters.py	/^    blurX=41,$/;"	v
blurY	parameters.py	/^    blurY=41,$/;"	v
boxBorder	parameters.py	/^    boxBorder=3,$/;"	v
boxDeleteNRGB	parameters.py	/^    boxDeleteNRGB=(140, 70, 0),$/;"	v
boxDeleteRGB	parameters.py	/^    boxDeleteRGB=(240, 170, 20),$/;"	v
boxRemainNRGB	parameters.py	/^    boxRemainNRGB=(70, 140, 0),$/;"	v
boxRemainRGB	parameters.py	/^    boxRemainRGB=(170, 240, 40),$/;"	v
boxed	parameters.py	/^    boxed=("image", None),$/;"	v
boxes	ocr.py	/^    boxes=image_to_boxes,$/;"	v
broad	parameters.py	/^    broad=(0, 0, 255),$/;"	v
chain	lib.py	/^from itertools import chain, groupby$/;"	i
chain	page.py	/^from itertools import chain$/;"	i
clean	parameters.py	/^    clean=("image", None),$/;"	v
cleanRGB	parameters.py	/^    cleanRGB=(255, 255, 255),$/;"	v
cleanh	parameters.py	/^    cleanh=("image", None),$/;"	v
cleanhRGB	parameters.py	/^    cleanhRGB=(220, 220, 220),$/;"	v
cluster	lib.py	/^def cluster(points, result):$/;"	f
colorDeg	lib.py	/^    colorDeg = (100, 100, 255)$/;"	v
configure	book.py	/^    def configure(self, reset=False, **params):$/;"	m	class:Book
configure	parameters.py	/^    def configure(self, reset=False, **params):$/;"	m	class:Config
connectBorder	parameters.py	/^    connectBorder=4,$/;"	v
connectRatio	parameters.py	/^    connectRatio=0.1,$/;"	v
connectThreshold	parameters.py	/^    connectThreshold=200 * 200,$/;"	v
connected	lib.py	/^def connected(markH, markW, bw, threshold, img, hitPoint):$/;"	f
connectionDegree	lib.py	/^    connectionDegree = int(round(connectionDegree * 100))$/;"	v
cv2	book.py	/^import cv2$/;"	i
cv2	lib.py	/^import cv2$/;"	i
cv2	page.py	/^import cv2$/;"	i
d	lib.py	/^    def d(p1, p2):$/;"	f	function:cluster
data	ocr.py	/^    data=image_to_data,$/;"	v
deepcopy	parameters.py	/^from copy import deepcopy$/;"	i
demargined	parameters.py	/^    demargined=("image", None),$/;"	v
demarginedC	parameters.py	/^    demarginedC=("image", None),$/;"	v
display	lib.py	/^from IPython.display import HTML, Image, display$/;"	i
display	page.py	/^from IPython.display import HTML, display$/;"	i
getLargest	lib.py	/^def getLargest(hist, width, threshold):$/;"	f
gray	parameters.py	/^    gray=("image", None),$/;"	v
groupby	lib.py	/^from itertools import chain, groupby$/;"	i
hStrokeRGB	parameters.py	/^    hStrokeRGB=(255, 0, 0),$/;"	v
halfOffsetX	lib.py	/^    halfOffsetX = offsetX \/\/ 2$/;"	v
high	parameters.py	/^    high=(128, 128, 255),$/;"	v
histogram	parameters.py	/^    histogram=("image", None),$/;"	v
imageFileList	lib.py	/^def imageFileList(imDir):$/;"	f
imageFileListSub	lib.py	/^def imageFileListSub(imDir):$/;"	f
image_to_boxes	ocr.py	/^from pytesseract import image_to_data, image_to_string, image_to_boxes$/;"	i
image_to_data	ocr.py	/^from pytesseract import image_to_data, image_to_string, image_to_boxes$/;"	i
image_to_string	ocr.py	/^from pytesseract import image_to_data, image_to_string, image_to_boxes$/;"	i
img	lib.py	/^def img(data):$/;"	f
inDir	parameters.py	/^    inDir="in",$/;"	v
inter	parameters.py	/^    inter=(255, 200, 200),$/;"	v
interDir	parameters.py	/^    interDir="inter",$/;"	v
io	lib.py	/^import io$/;"	i
layout	parameters.py	/^    layout=("image", None),$/;"	v
letterRGB	parameters.py	/^    letterRGB=(0, 200, 200),$/;"	v
loadCleanInfo	lib.py	/^def loadCleanInfo(self, data):$/;"	f
low	parameters.py	/^    low=(255, 128, 128),$/;"	v
main	book.py	/^def main():$/;"	f
main	parameters.py	/^    main=(40, 40, 40),$/;"	v
marginGRS	parameters.py	/^    marginGRS=255,$/;"	v
marginRGB	parameters.py	/^    marginRGB=(250, 250, 250),$/;"	v
marginThresholdX	parameters.py	/^    marginThresholdX=1,$/;"	v
marginThresholdY	parameters.py	/^    marginThresholdY=5,$/;"	v
markData	parameters.py	/^    markData=("data", "tsv"),$/;"	v
marksDir	parameters.py	/^    marksDir="marks",$/;"	v
maxHits	parameters.py	/^    maxHits=5000,$/;"	v
measure	lib.py	/^def measure(borderInside, borderOutside, threshold):$/;"	f
mid	parameters.py	/^    mid=(128, 255, 128),$/;"	v
normalized	parameters.py	/^    normalized=("image", None),$/;"	v
normalizedC	parameters.py	/^    normalizedC=("image", None),$/;"	v
np	lib.py	/^import numpy as np$/;"	i
np	page.py	/^import numpy as np$/;"	i
ocrData	parameters.py	/^    ocrData=("data", "tsv"),$/;"	v
offsetX	lib.py	/^    offsetX = 80 + marginX$/;"	v
offsetY	lib.py	/^    offsetY = 60 + marginY$/;"	v
orig	parameters.py	/^    orig=("image", None),$/;"	v
os	book.py	/^import os$/;"	i
os	lib.py	/^import os$/;"	i
os	page.py	/^import os$/;"	i
outDir	parameters.py	/^    outDir="out",$/;"	v
pagesRep	lib.py	/^def pagesRep(source, asList=False):$/;"	f
parseBands	lib.py	/^def parseBands(band, allBands, error):$/;"	f
parseMarks	lib.py	/^def parseMarks(mark, allMarks, bands, error):$/;"	f
parseStages	lib.py	/^def parseStages(stage, allStages, sortedStages, error):$/;"	f
process	book.py	/^    def process($/;"	m	class:Book
ptDeg	lib.py	/^    ptDeg = (left, bottom + frameWidth + 8)$/;"	v
ptSeq	lib.py	/^    ptSeq = (left, top - frameWidth - 2)$/;"	v
rangesFromList	lib.py	/^from tf.core.helpers import rangesFromList, specFromRanges$/;"	i
rangesFromSet	page.py	/^from tf.core.helpers import rangesFromSet$/;"	i
read	ocr.py	/^    def read(self, mode=None):$/;"	m	class:OCR
removeSkewStripes	lib.py	/^def removeSkewStripes(img, skewBorder, skewColor):$/;"	f
rotated	parameters.py	/^    rotated=("image", None),$/;"	v
select	lib.py	/^def select(source, selection):$/;"	f
sep	lib.py	/^    sep = '' if not kind else '-'$/;"	v
show	page.py	/^    def show(self, stage=None, band=None, mark=None, **displayParams):$/;"	m	class:Page
show	parameters.py	/^    def show(self, params=None):$/;"	m	class:Config
showImage	lib.py	/^def showImage(a, fmt="jpeg", **kwargs):$/;"	f
showSettings	book.py	/^    def showSettings(self, params=None):$/;"	m	class:Book
showit	lib.py	/^def showit(label, texto, texti, val):$/;"	f
skewBorder	parameters.py	/^    skewBorder=30,$/;"	v
specFromRanges	lib.py	/^from tf.core.helpers import rangesFromList, specFromRanges$/;"	i
splitext	lib.py	/^def splitext(f, withDot=True):$/;"	f
storeCleanInfo	lib.py	/^def storeCleanInfo(source):$/;"	f
string	ocr.py	/^    string=image_to_string,$/;"	v
sys	book.py	/^import sys$/;"	i
tempFile	lib.py	/^def tempFile():$/;"	f
vStrokeRGB	parameters.py	/^    vStrokeRGB=(0, 255, 0),$/;"	v
whiteGRS	parameters.py	/^    whiteGRS=255,$/;"	v
whiteRGB	parameters.py	/^    whiteRGB=(255, 255, 255),$/;"	v
write	page.py	/^    def write(self, stage=None):$/;"	m	class:Page
y	lib.py	/^    y = top + offsetY$/;"	v
